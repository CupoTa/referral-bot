require('dotenv').config()
const { session, InlineKeyboard, Keyboard } = require("grammy");
const mongoose = require("mongoose");
const MongoStorage = require("@grammyjs/storage-mongodb");
const {checkSubscribeButton, referralLink} = require("./buttons")
const bot = require("./connect")
const {checkSubscribeUser} = require("./helpers")

const {
    conversations,
    createConversation,
  } = require("@grammyjs/conversations");


const channel_name = process.env.CHANNEL_NAME;
const bot_name = process.env.BOT_NAME;


async function bootstrap () {


    await mongoose.connect("mongodb://127.0.0.1:27017/telega_bot?authSource=admin");

    const collection = mongoose.connection.db.collection(
      "sessions",
    );
    
    function initial() {
        return { 
            referralID: null,
        uID: null,
        chatID: null,
        subscribed: false
         };
      }

    bot.use(
        session({
            initial,
            storage: new MongoStorage.MongoDBAdapter({collection})
        })
    );

    await bot.api.setMyCommands([
        { command: "start", description: "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞" },
        { command: "help", description: "–ü–æ–º–æ—â—å" },
        { command: "mylink", description: "–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞" },
      ]);



    bot.hears(/\/start (\d+)/, async (ctx) => {

        ctx.reply(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å ${ctx.from?.first_name}`)

        if(ctx.session.referralID === null && ctx.session.chatID === null){
            ctx.session.referralID = Number(ctx?.match[1])
            ctx.session.chatID = ctx.chat.id
            ctx.session.uID = ctx.from.id
        }
        //bot.api.sendSticker(ctx.chat.id, 'https://cdn.tlgrm.app/stickers/9f6/83c/9f683c0b-9e0a-4f2f-93f6-8068dd75de8f/192/4.webp')

        const userStatus = await checkSubscribeUser(channel_name, ctx.from.id)

        if(userStatus === "left"){
            if(!ctx.session.subscribed){
                return ctx.reply(`–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —á–µ–∫, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª ${channel_name}, –ø–æ—Å–ª–µ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É`, { 
                    reply_markup: checkSubscribeButton
                })
            } else {
                ctx.reply(`–í—ã —Ä–∞–Ω–µ–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª ${channel_name} –∏ –ø–æ–ª—É—á–∞–ª–∏ —á–µ–∫, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –µ—â–µ –ø–æ–ª—É—á–∞—Ç—å —á–µ–∫–∏ —Ç–æ –ø–æ–ø–∏—à–∏—Ç–µ—Å—å —Å–Ω–æ–≤–∞ –∏ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç–µ –í–∞—à—É —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É` +
                `–≤ —Å–æ—Ü —Å–µ—Ç—è—Ö –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ —á–µ–∫–∏ –Ω–∞ 0.1 TON`, {
                reply_markup: new InlineKeyboard().text('–ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É', 'link')
            })
            }
            
        } else if(userStatus === 'member') {
            ctx.reply(`_*–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:*_ \`https://t.me/${bot_name}?start=${ctx.from.id}\``, { 
                parse_mode: "MarkdownV2",
                reply_markup: new InlineKeyboard().switchInline('–ü–æ–¥–µ–ª–∏—Ç—å—Å—è', `referralLink`)
            })
        } else {
            ctx.reply(`–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑`)
        }

    })

    bot.command("start", async (ctx) => {

        ctx.reply(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å ${ctx.from?.first_name}`)

        if(ctx.session.uID === null){
            ctx.session.chatID = ctx.chat.id
            ctx.session.uID = ctx.from.id
        } 

        const userStatus = await checkSubscribeUser(channel_name, ctx.from.id)


        if(userStatus === "left"){
            if(!ctx.session.subscribed){
                ctx.reply(`–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —á–µ–∫, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª ${channel_name}, –ø–æ—Å–ª–µ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É`, { 
                    reply_markup: checkSubscribeButton 
                })
            } else {
                ctx.reply(`–í—ã —Ä–∞–Ω–µ–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª ${channel_name} –∏ –ø–æ–ª—É—á–∞–ª–∏ —á–µ–∫, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –µ—â–µ –ø–æ–ª—É—á–∞—Ç—å —á–µ–∫–∏ —Ç–æ –ø–æ–ø–∏—à–∏—Ç–µ—Å—å —Å–Ω–æ–≤–∞ –∏ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç–µ –í–∞—à—É —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É` +
                `–≤ —Å–æ—Ü —Å–µ—Ç—è—Ö –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ —á–µ–∫–∏ –Ω–∞ 0.1 TON`, {
                    reply_markup: new InlineKeyboard().text('–ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É', 'link')
                })
            }
            
        } else if(userStatus === 'member') {
            ctx.reply(`_*–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:*_ \n\n\`https://t.me/${bot_name}?start=${ctx.from.id}\``, { 
                parse_mode: "MarkdownV2",
                reply_markup: new InlineKeyboard().switchInline('–ü–æ–¥–µ–ª–∏—Ç—å—Å—è', `referralLink`)
            })
        } else {
            ctx.reply(`–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑`)
        }
    
    });

    // –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è!"

    bot.callbackQuery('checkSubscribe', async (ctx) => {
        const userStatus = await checkSubscribeUser(channel_name, ctx.from.id)

        if(userStatus === 'left'){
            
            ctx.reply(`–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —è –Ω–µ –Ω–∞—à–µ–ª –í–∞—Å –≤ –∫–∞–Ω–∞–ª–µ, –ø–æ—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ ${channel_name}, –ø–æ—Å–ª–µ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É`, { 
                reply_markup: checkSubscribeButton 
            })

        } else if(userStatus === 'member'){
            
            if(!ctx.session.subscribed) {
                const chequeUserTon = 'http://t.me/CryptoBot?start=CQxopk8OOmJJ'    // 0.05 -201
                const chequeReferralTon = 'http://t.me/CryptoBot?start=CQUGux9UeS6M' // 0.1 - 88
                ctx.reply(`–û—Ç–ª–∏—á–Ω–æ! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É, –∑–∞–±–µ—Ä–∏—Ç–µ –Ω–∞—à—É –í–∞–º –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –µ—â–µ –ø–æ–ª—É—á–∞—Ç—å —á–µ–∫–∏ —Ç–æ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç–µ –í–∞—à—É —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É ` +
                `–≤ —Å–æ—Ü —Å–µ—Ç—è—Ö –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ —á–µ–∫–∏ –Ω–∞ 0.1 TON`, {
                    reply_markup: new InlineKeyboard().url('–ß–µ–∫ –Ω–∞ 0.05 TON', chequeUserTon)
                    .text('–ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É', 'link')
                })
                ctx.session.subscribed = true

                // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
                let referralStatus = ''

                if(ctx.session.referralID !== null)
                    referralStatus = await checkSubscribeUser(channel_name, ctx.session.referralID)

                if(referralStatus === 'member'){
                    bot.api.sendMessage(ctx.session.referralID, `–ü–æ –í–∞—à–µ–π —Å—Å—ã–ª–∫–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è ${ctx.from.first_name}\n –∑–∞–±–µ—Ä–∏—Ç–µ –Ω–∞—à—É –í–∞–º –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å`, {
                        reply_markup: new InlineKeyboard().url('–ß–µ–∫ –Ω–∞ 0.1 TON', chequeReferralTon)
                        .text('–ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É', 'link')
                    })
                }
            } else {
                ctx.reply('–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ —á–µ–∫ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –µ—â–µ –ø–æ–ª—É—á–∞—Ç—å —á–µ–∫–∏ —Ç–æ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç–µ –í–∞—à—É —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É' +
                 '–≤ —Å–æ—Ü —Å–µ—Ç—è—Ö –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ —á–µ–∫–∏ –Ω–∞ 0.1 TON')
                 ctx.reply(`_*–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:*_ \n\n\`https://t.me/${bot_name}?start=${ctx.from.id}\``, { 
                parse_mode: "MarkdownV2",
                reply_markup: new InlineKeyboard().switchInline('–ü–æ–¥–µ–ª–∏—Ç—å—Å—è', `referralLink`)
            })
            }

        } else {
            
            ctx.reply(`–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫`)

        }
    })

    bot.command('mylink', async (ctx) => {

        const userStatus = await checkSubscribeUser(channel_name, ctx.from.id)

        if(userStatus === 'left') {
            ctx.reply(`–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª ${channel_name}, –ø–æ—Å–ª–µ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É`, { 
                reply_markup: checkSubscribeButton 
            })
        } else if(userStatus === "member"){
            ctx.reply(`_*–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:*_ \n\n\`https://t.me/${bot_name}?start=${ctx.from.id}\``, { 
                parse_mode: "MarkdownV2",
                reply_markup: new InlineKeyboard().switchInline('–ü–æ–¥–µ–ª–∏—Ç—å—Å—è', `referralLink`)
            })
            
        } else {
            
        }
    })


    bot.inlineQuery(/referralLink/, async (ctx) => {
        await ctx.answerInlineQuery([
            {
              type: "article",
              id: "crypto_hanters",
              title: "TON –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É",
              input_message_content: {
                message_text:
      "<b>TON –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª!</b>.! üëá",
                parse_mode: "HTML",
              },
              reply_markup: new InlineKeyboard().url(
                "–•–æ—á—É TON",
                `https://t.me/${bot_name}?start=${ctx.from.id}`,
              ),
              url: `https://t.me/${bot_name}?start=${ctx.from.id}`,
              hide_url: true,
              description: "CryptoHanters - —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª –æ –∫—Ä–∏–ø—Ç–µ –∏ –Ω–µ —Ç–æ–ª—å–∫–æ!",
            },
          ],
          { cache_time: 30 * 24 * 3600 },)
    })

   
    bot.command('help', async (ctx) => {
        ctx.reply(`–ü—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ —á–µ—Ä–µ–∑ –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ –Ω–∞ –∫–∞–Ω–∞–ª ${channel_name} –í—ã –ø–æ–ª—É—á–∏—Ç–µ —á–µ–∫ –Ω–∞ –º–æ–Ω–µ—Ç—É TON, —Ç–∞–∫ –∂–µ —ç—Ç–æ—Ç –±–æ—Ç –º–æ–∂–µ—Ç –≤—ã–¥–∞—Ç—å 
        –í–∞–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–∑–µ–π –∏ –∑–Ω–∞–∫–æ–º—ã—Ö, –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥–ø–∏—Å–∞–≤—à–µ–≥–æ—Å—è –Ω–∞ –∫–∞–Ω–∞–ª –í–∞–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —á–µ–∫ –Ω–∞ –º–æ–Ω–µ—Ç—ã TON, 
        –∏ –ø–æ–¥–ø–∏—Å–∞–≤—à–∏–π—Å—è —Ç–∞–∫ –∂–µ –ø–æ–ª—É—á–∞–µ—Ç —á–µ–∫!`)
    })

    bot.callbackQuery('link', async (ctx) => {
        const userStatus = await checkSubscribeUser(channel_name, ctx.from.id)

        if(userStatus === 'left') {
            ctx.reply(`–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª ${channel_name}, –ø–æ—Å–ª–µ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É`, { 
                reply_markup: checkSubscribeButton 
            })
        } else if(userStatus === "member"){
            ctx.reply(`_*–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:*_ \n\n\`https://t.me/${bot_name}?start=${ctx.from.id}\``, { 
                parse_mode: "MarkdownV2",
                reply_markup: new InlineKeyboard().switchInline('–ü–æ–¥–µ–ª–∏—Ç—å—Å—è', `referralLink`)
            })
            
        } else {
            
        }
    })

    bot.start();

}
    
bootstrap()

// function initial() {
//     return { referralId: 0 };
//   }

//   mongoose.connect("mongodb://localhost:27017/test");

//   const collection = mongoose.connection.db.collection(
//     "sessions",
//   );

//   bot.use(session({ initial }));

//   const inlineKeyboard = new InlineKeyboard()
//   .text("Payload", "click-payload")
 
//   const keyboard = new Keyboard()
//   .text("Yes")
//   .text("No")
//   .resized()
//   .oneTime()
//   .placeholder("Decide now!");

// bot.command("start", (ctx) => {
// ctx.session.referralId = ctx.match || 0
// ctx.reply("Welcome! Up and running.", { reply_markup: keyboard })

// });
// // Handle other messages.
// bot.on("message", async (ctx) => await bot.api.sendMessage(ctx.chat.id, 
//     ctx.session.referralId !== 0 ? ctx.session.referralId : `_*–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:*_ \`https://t.me/${bot_name}?start=${ctx.from.id}\``,
//     { parse_mode: "MarkdownV2" })
// );

// bot.callbackQuery("click-payload", async (ctx) => {
//     await ctx.answerCallbackQuery({
//       text: "You were curious, indeed!",
//     });
//   });

// bot.on("callback_query:data", async (ctx) => {
//   console.log("Unknown button event with payload", ctx.callbackQuery.data);
//   await ctx.answerCallbackQuery(); // remove loading animation
// });

// // Now that you specified how to handle messages, you can start your bot.
// // This will connect to the Telegram servers and wait for messages.

// // Start the bot.
// bot.start();